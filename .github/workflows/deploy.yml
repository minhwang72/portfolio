name: Deploy Portfolio

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Load environment variables
      run: |
        echo "DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}" >> $GITHUB_ENV
        echo "DOCKER_TAG=${{ secrets.DOCKER_TAG }}" >> $GITHUB_ENV
        echo "SERVER_HOST=${{ secrets.SERVER_HOST }}" >> $GITHUB_ENV
        echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> $GITHUB_ENV
        echo "SERVER_USER=${{ secrets.SERVER_USER }}" >> $GITHUB_ENV
        echo "CONTAINER_NAME=portfolio" >> $GITHUB_ENV
        echo "PORT=3000" >> $GITHUB_ENV
        echo "HOST=0.0.0.0" >> $GITHUB_ENV
        echo "NODE_ENV=production" >> $GITHUB_ENV

    - name: Install dependencies
      run: yarn install --frozen-lockfile --production=false

    - name: Build
      run: yarn build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          image=moby/buildkit:latest
          network=host

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
        platforms: linux/amd64
        build-args: |
          HOST=${{ env.HOST }}
          NODE_ENV=${{ env.NODE_ENV }}

    - name: Deploy to Personal Server via SSH
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ env.SERVER_HOST }}
        port: ${{ env.SERVER_PORT }}
        username: ${{ env.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          if docker ps -a | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "Stopping and removing previous container..."
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
          fi

          echo "Pulling new image..."
          docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

          echo "Starting new container..."
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            --restart unless-stopped \
            --health-cmd "curl -f http://localhost:${{ env.PORT }} || exit 1" \
            --health-interval 30s \
            --health-timeout 3s \
            --health-retries 3 \
            -p ${{ env.PORT }}:${{ env.PORT }} \
            -e HOST=${{ env.HOST }} \
            -e NODE_ENV=${{ env.NODE_ENV }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

          echo "Checking deployment status..."
          sleep 10
          if docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
            echo "Deployment successful!"
            docker logs ${{ env.CONTAINER_NAME }}
          else
            echo "Deployment failed!"
            docker logs ${{ env.CONTAINER_NAME }}
            exit 1
          fi 